---

## General
redis_version: 4.0.1
redis_ruby_gem_version: "{{ redis_version }}"

# cluster or single
redis_mode: single

# set this to false when installing the role inside container
redis_disable_transparent_hugepage: true

# Enables/Disables 'make test' step during installation
# Is an optional step: (https://redis.io/topics/quickstart)
# 'At this point you can try if your build works correctly by typing make test,
# but this is an optional step'
redis_check_build: false

## Service options

# Owner
redis_user: redis
redis_group: redis

# Files & Paths
redis_install_path: "/redis"  # redis source will be here
redis_conf_path: "/conf/redis"  # redis configuration and running instance data will be here
redis_server_conf_template_path: redis.conf.j2
redis_manager_template_path: instance-manager.sh.j2
redis_service_template_path: redis-server.service.j2
redis_log_path: "/var/log/redis"

# current state: started, stopped
redis_service_state: started
redis_cluster_replicas: 0
redis_install_new_version: false  # set this to true to force an installation

# start on boot
redis_service_enabled: true

#### redis.conf variables ####

# this include default conf file
include_redis_default_conf: true

redis_save:
  - 900 1
  - 300 10
  - 60 10000

# you can include here redis.conf's vars
# use quotation mark to avoid python value override
redis_confs:
  bind: "0.0.0.0"
  protected-mode: "no"
  port: "6379"  # this is mandatory
  pidfile: "/var/run/redis/redis.pid"
  loglevel: "notice"
  logfile: "{{ redis_log_path }}/redis.log"
  databases: "16"
  rdbcompression: "yes"
  rdbchecksum: "yes"
  supervised: "systemd"
  slave-serve-stale-data: "yes"
  slave-read-only: "yes"
  stop-writes-on-bgsave-error: "yes"
  # include to start node as cluster member
  # cluster-node-timeout: "2000"
  # cluster-enabled: "yes"
  # cluster-config-file: node.conf
  appendonly: "yes"
  appendfilename: "appendonly-db.aof"
  dbfilename: "dump.rdb"
  daemonize: "yes"  # mandatory for cluster node
