#!/usr/bin/env bash


################################################################################
#### The porpuse of this script is to be invoked from ansible task #############
#### You shouldn't run this manually ###########################################
#### Variables can be change to hardcode some nodes but it is not recommended ##
################################################################################


source "{{ redis_conf_path }}/cluster-config.sh"

SLOTS=5461

NODE_ID=$(redis-cli -p $PORT cluster nodes | grep myself | cut -d" " -f1)
NODE_SHORT_ID=$(echo $NODE_ID | cut -c1-8)


OTHER_MASTER_ID=$(redis-cli cluster nodes | grep master | grep -v myself | head -1 | cut -d" " -f1)
OTHER_MASTER_IP=$(redis-cli cluster nodes | grep master | grep -v myself | head -1 | cut -d" " -f2 | cut -d"@" -f1)

for HOST in $HOSTS; do
    if [[ -z "$OTHER_MASTER_IP" && "$CURRENT_HOST" != "$HOST"  ]]; then
        OTHER_MASTER_ID=$(redis-cli -h $HOST -p $PORT cluster nodes | grep master | grep -v myself | head -1 | cut -d" " -f1)
        OTHER_MASTER_IP=$(redis-cli -h $HOST -p $PORT cluster nodes | grep master | grep -v myself | head -1 | cut -d" " -f2 | cut -d"@" -f1)
    fi
done

slave-ip() {
    #slave0:ip=127.0.0.1,port=7003,state=online,offset=1695,lag=1
    return $(redis-cli -p $PORT info | grep slave0 | cut -d: -f2  | cut -d= -f2 | cut -d, -f1)
}

failover() {
    redis-cli -h $1 -p $PORT cluster failover
}

is-master() {
    ROLE=$(redis-cli role 2> /dev/null | grep master | wc -l)
    [ "${ROLE}" == "1" ] && return 0 || return 1
}

has-slave() {
    NO_SLAVE_LINES=$(redis-cli -p $PORT info | grep connected_slaves:0 | wc -l)
    [ "${NO_SLAVE_LINES}" == "1" ] && return 1 || return 0
}

rebalance (){
    redis-trib rebalance $@ --use-empty-masters $NODE_IP
}

delete-node () {
    if is-master ; then
        if has-slave ; then
            failover slave-ip
        else
            rebalance --weight $NODE_SHORT_ID=0.0
            redis-trib del-node $OTHER_MASTER_IP $NODE_ID
            rm $REDIS_CONF/$NODE_CONF_FILE
        fi
    fi
    exit 0
}

add-node () {
    if is-master ; then
        redis-trib add-node $NODE_IP $OTHER_MASTER_IP
        rebalance --weight $NODE_SHORT_ID=1.0
    else
        redis-trib add-node --slave $NODE_IP $OTHER_MASTER_IP
    fi
    exit 0
}

declare -A commands

commands[add]=add-node
commands[delete]=delete-node

${commands[$1]}
